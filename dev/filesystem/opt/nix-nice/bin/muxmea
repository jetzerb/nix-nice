#!/usr/bin/env bash
IFS=$'\n\t';
set -euo pipefail;


# Create a tmux session with a half dozen windows.
# Specify a regex matching a project under
#  ~/src/[code|review]/[provider]/
#
# The tmux session name will be the project name.
# Override with a 2nd argument if desired.
#

if [ -z "$1" ]
then
	echo "No project name specified; just use plain old tmux.";
	exit 1;
fi;

case "$1" in
	-\? | -h | -l | ls)
		tmux ls;
		exit 0;
esac;

# capture all projects matching the pattern
mapfile -t -O 1 projInfo < <(
	find {~,~/hosthome}/src/{code,review} -mindepth 2 -maxdepth 2 -type d -iname '*'"$1"'*'|
	awk -F '/' '{print $(NF-1) "/" $NF;}' |
	sort --ignore-case --unique
);

# if multiple matches, ask which one to use
idx=1;
case ${#projInfo[@]} in
	0) echo "No matching project found on the filesystem."; exit 1;;
	1) ;;
	*)
		printf "%s\n" "${projInfo[@]}" | nl;
		read -rp "Which one? " idx;
		;;
esac;
if [ "$idx" -gt 0 ] 2> /dev/null && [ "$idx" -le "${#projInfo[@]}" ] 2> /dev/null
then
	IFS='/' read -ra proj <<<"${projInfo[idx]}";
else
	echo "Invalid selection";
	exit 1;
fi;
session="$(tr '[:lower:]' '[:upper:]' <<<"${2:-${proj[1]}}")";


# detach from any existing session first
if [ -n "${TMUX:-}" ]
then
	session=$(tmux display-message -p '#{session_name}');
	echo "Already in session '$session', and it's impossible to create a sibling session.";
	echo "Run this command again after detaching";
	sleep 2;
	tmux detach;
	exit 0; # unnecessary; detaching will stop the script
fi;


# jump into existing session, or create a new one
#
# NOTE: has-session is not an exact match but instead returns true if the specified session
#       name matches the first characters of an existing session.  For example, if you have
#       a session called "ABC 123", then `tmux has-session -t "AB"` returns true, so if we
#       use that it'd be impossible to create a session "ABC" if "ABC 123" already exists.
#if tmux has-session -t "$session" 2>/dev/null
if grep '^'"$session"': ' <(tmux ls)
then
	echo "Attaching to existing session '$session'";
	tmux attach -t "$session";
else
	echo "Building new session '$session'";
	exist=0;
	for dir in code review
	do
		tgtDir="$HOME/src/$dir/${projInfo[idx]}";
		[ -d "$tgtDir" ] || tgtDir="${tgtDir/$HOME/$HOME/hosthome}";
		for iter in A B
		do
			if [ $exist -eq 0 ]
			then
				tmux new-session -s "$session" -n "$dir$iter" -d -c "$tgtDir";
				exist=1;
			else
				tmux new-window -t "$session" -n "$dir$iter" -c "$tgtDir";
			fi;
		done;
	done;
	for iter in 1 2
	do
		tmux new-window -t "$session" -c "$HOME";
	done;
	tmux attach -t "$session" \; select-window -t "codeA";
fi;
