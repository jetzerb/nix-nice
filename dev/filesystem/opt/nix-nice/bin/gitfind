#!/bin/bash
set -euo pipefail;
IFS=$'\n\t';

#
# Show each object matching the specified pattern, along with the latest
# commit for each branch:
#
#  path/to/object/of/interest
#     commit information
#        branch1
#        branch2
#        etc
#
# *jetzerb 2018-02-20 created
#

pattern="$1"; # pattern specified by the caller

tab=$(echo -ne "\t");  # delimiter for sort later on
prevhash="";           # when printing, need to know
prevfile="";           # when the values change
commit="";             # initialize empty var

yellow="\033[1;33m";  
cyan="\033[1;36m";
normal="\033[0;0m";

# jump up to top level of repo so that git log finds the files
cd "$(git rev-parse --show-toplevel)";


for branch in $(git branch -a --format="%(refname)" |sed 's!^refs/[^/][^/]*/!!')
do
	result=$(git ls-tree -r  --full-name "$branch" | (grep -iE "$pattern" || true) | sed 's/^[^ ]* [^ ]* //');
	[ -n "$result" ] && result+="\t$branch";
done |
sort -t "$tab" -k 2,2 -k 1,1 -k 3,3 |
while read -r -a info
do
	hash=${info[0]}; file=${info[1]}; branch=${info[2]};
	if [ "$file" != "$prevfile" ]
	then
		[ -n "$commit" ] && echo -e "\n\n"; # vertical space after previous file
		echo -e "${yellow}${file}${normal}";
		prevfile="$file"; commit="";
	fi;
	if [ "$hash" != "$prevhash" ]
	then
		[ -n "$commit" ] && echo;  #vertical space after commit
		# use sed below because head sporadically fails for unknown reason
		commit=$(git log --format="%h : %ae : %aD : %s" "$branch" -- "$file" |sed -n '1p');
		echo -e "\t${cyan}${commit}${normal}";
		prevhash=$hash;
	fi;
	echo -e "\t\t$branch";
done;
