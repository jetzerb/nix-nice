#!/bin/bash
set -euo pipefail;
IFS=$'\n\t';

#
# Show each object matching the specified pattern, along with the latest
# commit for each branch:
#
#  path/to/object/of/interest
#     commit information
#        branch1
#        branch2
#        etc
#
# *jetzerb 2018-02-20 created
#

pattern="$1"; # filename regex pattern specified by the caller

tab=$(echo -ne "\t");  # delimiter for sort later on
prevhash="";           # when printing, need to know
prevfile="";           # when the values change
commit="";             # initialize empty var

yellow="\033[1;33m";  
cyan="\033[1;36m";
normal="\033[0;0m";

# jump up to top level of repo so that git log finds the files
cd "$(git rev-parse --show-toplevel)";


for branch in $(git branch -a --format="%(refname)" |sed 's!^refs/[^/][^/]*/!!')
do
	echo ">>>>$branch";
	git ls-tree -r  --full-name "$branch"
done |
awk -v ptn="$pattern" -v q="'" -F "$tab" '
BEGIN {
	fmt = "%h-%ai-%an-%s";
	gsub(/-/,"\t",fmt);
	cmd = "git log --format=" q fmt q " ";
}

/^>>>>/ {sub(/^>>>>/,""); branch = $0; next;}

tolower($2) ~ tolower(ptn) {
	sub(/.* /,"",$1);
	hash = $1;
	file = $2;

	tmp = cmd branch " -- " q file q;
	tmp | getline commit;

	#    1,    2,      3,    4,      5,       6,      7
	# file, hash, commit, date, author, subject, branch
	list[idx++] = file FS hash FS commit FS branch;
	split(commit,pcs);
	if (maxDt[file,hash] < pcs[2]) {maxDt[file,hash] = pcs[2];}
}
END {
	for (idx in list)
	{
		line = list[idx];
		split(line,pcs);
		print line FS maxDt[pcs[1],pcs[2]];
	}
}
' |
sort -t "$tab" -k 1,1 -k 8,8r -k 4,4r -k 7,7 |
awk -v yellow="$yellow" -v cyan="$cyan" -v normal="$normal" -F "$tab" '
{
	file    = $1;
	hash    = $2;
	commit  = $3;
	date    = $4;
	author  = $5;
	subject = $6;
	branch  = $7;

	if (file != prevFile)
	{
		if (prevFile) {printf("\n\n\n");}
		print yellow file normal;
		prevFile = file;
		prevHash = "";
	}

	if (hash != prevHash)
	{
		if (prevHash) {printf("\n\n");}
		print FS hash;
		prevHash   = hash;
		prevCommit = "";
	}

	if (commit != prevCommit)
	{
		if (prevCommit) {printf("\n");}
		printf("%s%s%s%s | %s | %s | %s%s\n",FS,FS,cyan,commit,date,author,subject,normal);
		prevCommit = commit;
	}

	print FS FS FS branch;
}'
