#!/bin/bash
set -euo pipefail;

while getopts 'r' opt
do
	case $opt in
		r) raw=1;;
		*) exit 1;;
	esac;
done;
shift $((OPTIND - 1));
project=${1:-};

# strip the prefix off of the current working dir
path="${PWD##*/src/}";

if [ -z "$project" ]
then
	project=$(echo "$path" | awk -F '/' '{print $3;}');
fi;

if [ -z "$project" ]
then
	echo "Not in a project directory, and no project specified.";
	exit 1;
fi;

# Figure out how to get the list of repos based on the current
# working directory
url=$(echo "$path" | awk -F '/' '{sub("=","/",$2); print $2;}');

if [ -z "${raw:-}" ]
then
	echo "Repos at '$url' for project/user '$project'";
	output_fmt="-oat";
else
	output_fmt="-ocsv -od $(printf "\x1f")";
fi;

case "$url" in
	dev.azure.com/*)
		az repos list --project "$project" --organization "https://$url" \
			--query '[*].{fork: isFork, name: name, size: size, created_at: null, updated_at: null, description: null}';;
	github.com)
		curl -s https://api.github.com/users/"$project"/repos;;
	*)
		echo "Unhandled source control provider: '$url'"
		exit 1;;
esac |
trdsql -driver sqlite3 -ijson $output_fmt "
	select fork
	      ,cast(size/1024.0 as int) as size_kB
	      ,name
	      ,coalesce(nullif(created_at ,''),'n/a') as created_at
	      ,coalesce(nullif(updated_at ,''),'n/a') as updated_at
	      ,coalesce(nullif(description,''),'n/a') as description
	from -
	order by fork, name";
